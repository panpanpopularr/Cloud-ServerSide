// api/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  ACTIVE
  UNASSIGNED
  CANCELED
  REVIEW
  DONE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  password  String?
  role      String   @default("user") // "user" | "admin"
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks    Task[]          @relation("TaskCreator")
  projects Project[]       @relation("UserOwnedProjects") // owner
  members  ProjectMember[]

  @@index([role])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String   @default("")
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner      User            @relation("UserOwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks      Task[]
  files      File[]
  members    ProjectMember[]
  activities Activity[] // ← เพิ่มบรรทัดนี้

  @@index([ownerId])
}

model ProjectMember {
  id        String @id @default(uuid())
  projectId String
  userId    String
  role      String @default("viewer") // viewer/editor (ตามจะขยาย)

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([userId])
}

model Task {
  id        String     @id @default(uuid())
  projectId String
  title     String
  status    TaskStatus @default(UNASSIGNED)
  deadline  DateTime?
  creatorId String?

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator User?   @relation("TaskCreator", fields: [creatorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
}

model File {
  id           String   @id @default(uuid())
  projectId    String
  filename     String
  originalname String
  mimetype     String
  size         Int
  uploadedAt   DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Activity {
  id        String   @id @default(uuid())
  projectId String
  type      String
  payload   Json
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}
