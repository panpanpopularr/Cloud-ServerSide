generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TaskStatus {
  ACTIVE
  UNASSIGNED
  CANCELED
  REVIEW
  DONE
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  passwordHash String?
  role      String   @default("user")
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  tasks     Task[]          @relation("TaskCreator")
  assign    Task[]          @relation("TaskAssignee")
  projects  Project[]       @relation("UserOwnedProjects") // owner
  members   ProjectMember[]
  comments  TaskComment[]

  @@index([role])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String   @default("")
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner       User            @relation("UserOwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  tasks       Task[]
  files       File[]
  members     ProjectMember[]
  activities  Activity[]

  @@index([ownerId])
}

model ProjectMember {
  id        String @id @default(uuid())
  projectId String
  userId    String
  role      String @default("viewer")

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@index([userId])
}

model Task {
  id         String     @id @default(uuid())
  projectId  String
  title      String
  status     TaskStatus @default(UNASSIGNED)
  deadline   DateTime?
  creatorId  String?
  assigneeId String?    // ← ผู้รับผิดชอบ (nullable)

  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator  User?   @relation("TaskCreator",  fields: [creatorId],  references: [id])
  assignee User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])

  comments  TaskComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([assigneeId])
}

model TaskComment {
  id        String   @id @default(uuid())
  taskId    String
  authorId  String
  body      String   @default("")
  // แนบไฟล์ (optional)
  fileName  String?
  mimeType  String?
  fileSize  Int?
  filePath  String?
  createdAt DateTime @default(now())

  task   Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([authorId])
}

model File {
  id           String   @id @default(uuid())
  projectId    String
  filename     String
  originalname String
  mimetype     String
  size         Int
  uploadedAt   DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

model Activity {
  id        String   @id @default(uuid())
  projectId String
  type      String
  payload   Json
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@index([projectId])
}

// prisma/schema.prisma
model ChatMessage {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  text      String
  createdAt DateTime @default(now())

  // (ถ้า project / user เป็น relation ก็ใส่เพิ่มได้)
  // project   Project @relation(fields: [projectId], references: [id])
  // user      User    @relation(fields: [userId], references: [id])
}
